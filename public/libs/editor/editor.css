/* stylelint-disable */
@font-face {
  font-family: icomoon;
  font-style: normal;
  font-weight: normal;
  src: url('fonts/icomoon.eot');
  src: url('fonts/icomoon.eot?#iefix') format('embedded-opentype'), url('fonts/icomoon.woff') format('woff'),
    url('fonts/icomoon.ttf') format('truetype'), url('fonts/icomoon.svg#icomoon') format('svg');
}

/* Use the following CSS code if you want to use data attributes for inserting your icons */
[data-icon]::before {
  content: attr(data-icon);
  font-family: icomoon;
  -webkit-font-smoothing: antialiased;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-transform: none;
}

/* Use the following CSS code if you want to have a class per icon */

/*
Instead of a list of all class selectors,
you can use the generic selector below, but it's slower:
[class*="icon-"] {
*/
.icon-bold,
.icon-italic,
.icon-quote,
.icon-unordered-list,
.icon-ordered-list,
.icon-link,
.icon-image,
.icon-play,
.icon-music,
.icon-contract,
.icon-fullscreen,
.icon-question,
.icon-info,
.icon-undo,
.icon-redo,
.icon-code,
.icon-preview {
  font-family: icomoon;
  -webkit-font-smoothing: antialiased;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-transform: none;
}

.icon-bold::before {
  content: '\e000';
}

.icon-italic::before {
  content: '\e001';
}

.icon-quote::before {
  content: '\e003';
}

.icon-unordered-list::before {
  content: '\e004';
}

.icon-ordered-list::before {
  content: '\e005';
}

.icon-link::before {
  content: '\e006';
}

.icon-image::before {
  content: '\e007';
}

.icon-play::before {
  content: '\e008';
}

.icon-music::before {
  content: '\e009';
}

.icon-contract::before {
  content: '\e00a';
}

.icon-fullscreen::before {
  content: '\e00b';
}

.icon-question::before {
  content: '\e00c';
}

.icon-info::before {
  content: '\e00d';
}

.icon-undo::before {
  content: '\e00e';
}

.icon-redo::before {
  content: '\e00f';
}

.icon-code::before {
  content: '\e011';
}

.icon-preview::before {
  content: '\e002';
}

/* BASICS */

.CodeMirror {
  height: 300px;
}

.CodeMirror-scroll {
  /* Set scrolling behaviour here */
  overflow: auto;
}

/* PADDING */

.CodeMirror-lines {
  padding: 4px 0; /* Vertical padding around content */
}

.CodeMirror pre {
  padding: 0 4px; /* Horizontal padding of content */
}

.CodeMirror-scrollbar-filler {
  background-color: white; /* The little square between H and V scrollbars */
}

/* CURSOR */
.CodeMirror div.CodeMirror-cursor {
  z-index: 3;
  border-left: 1px solid black;
}

/* Shown when moving in bi-directional text */
.CodeMirror div.CodeMirror-secondarycursor {
  border-left: 1px solid silver;
}

.CodeMirror.cm-keymap-fat-cursor div.CodeMirror-cursor {
  z-index: 1;
  width: auto;
  border: 0;
  background: #7e7;
}

/* Can style cursor different in overwrite (non-insert) mode */
.CodeMirror div.CodeMirror-cursor.CodeMirror-overwrite {
}

/* DEFAULT THEME */

.cm-s-paper .cm-keyword {
  color: #555;
}

.cm-s-paper .cm-atom {
  color: #7f8c8d;
}

.cm-s-paper .cm-number {
  color: #7f8c8d;
}

.cm-s-paper .cm-def {
  color: #00f;
}

.cm-s-paper .cm-variable {
  color: black;
}

.cm-s-paper .cm-variable-2 {
  color: #555;
}

.cm-s-paper .cm-variable-3 {
  color: #085;
}

.cm-s-paper .cm-property {
  color: black;
}

.cm-s-paper .cm-operator {
  color: black;
}

.cm-s-paper .cm-comment {
  color: #959595;
}

.cm-s-paper .cm-string {
  color: #7f8c8d;
}

.cm-s-paper .cm-string-2 {
  color: #f50;
}

.cm-s-paper .cm-meta {
  color: #555;
}

.cm-s-paper .cm-error {
  color: #f00;
}

.cm-s-paper .cm-qualifier {
  color: #555;
}

.cm-s-paper .cm-builtin {
  color: #555;
}

.cm-s-paper .cm-bracket {
  color: #997;
}

.cm-s-paper .cm-tag {
  color: #7f8c8d;
}

.cm-s-paper .cm-attribute {
  color: #7f8c8d;
}

.cm-s-paper .cm-header {
  color: #000;
}

.cm-s-paper .cm-quote {
  color: #888;
}

.cm-s-paper .cm-hr {
  color: #999;
}

.cm-s-paper .cm-link {
  color: #7f8c8d;
}

.cm-negative {
  color: #d44;
}

.cm-positive {
  color: #292;
}

.cm-header,
.cm-strong {
  font-weight: bold;
}

.cm-em {
  font-style: italic;
}

.cm-link {
  text-decoration: underline;
}

.cm-invalidchar {
  color: #f00;
}

div.CodeMirror span.CodeMirror-matchingbracket {
  color: #0f0;
}

div.CodeMirror span.CodeMirror-nonmatchingbracket {
  color: #f22;
}

/* STOP */

/* The rest of this file contains styles related to the mechanics of
   the editor. You probably shouldn't touch them. */

.CodeMirror {
  position: relative;
  overflow: hidden;
}

.CodeMirror-scroll {
  position: relative;
  height: 100%;
  padding-right: 30px;
  padding-bottom: 30px;
  margin-right: -30px;

  /* 30px is the magic margin used to hide the element's real scrollbars */

  /* See overflow: hidden in .CodeMirror, and the paddings in .CodeMirror-sizer */
  margin-bottom: -30px;
  outline: none; /* Prevent dragging from highlighting the element */
}

.CodeMirror-sizer {
  position: relative;
}

/* The fake, visible scrollbars. Used to force redraw during scrolling
   before actuall scrolling happens, thus preventing shaking and
   flickering artifacts. */
.CodeMirror-vscrollbar,
.CodeMirror-hscrollbar,
.CodeMirror-scrollbar-filler {
  position: absolute;
  z-index: 6;
  display: none;
}

.CodeMirror-vscrollbar {
  top: 0;
  right: 0;
  overflow-x: hidden;
  overflow-y: scroll;
}

.CodeMirror-hscrollbar {
  bottom: 0;
  left: 0;
  overflow-x: scroll;
  overflow-y: hidden;
}

.CodeMirror-scrollbar-filler {
  z-index: 6;
  right: 0;
  bottom: 0;
}

.CodeMirror-lines {
  cursor: text;
}

.CodeMirror pre {
  position: relative;
  z-index: 2;
  overflow: visible;
  border-width: 0;
  margin: 0;
  background: transparent;

  /* Reset some styles that the rest of the page might have set */
  border-radius: 0;
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  white-space: pre-wrap;
  word-wrap: normal;
}

.CodeMirror-wrap pre {
  white-space: pre-wrap;
  word-break: normal;
  word-wrap: break-word;
}

.CodeMirror-linebackground {
  position: absolute;
  z-index: 0;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.CodeMirror-linewidget {
  position: relative;
  z-index: 2;
  overflow: auto;
}

.CodeMirror-widget {
  display: inline-block;
}

.CodeMirror-wrap .CodeMirror-scroll {
  overflow-x: hidden;
}

.CodeMirror-measure {
  position: absolute;
  overflow: hidden;
  width: 100%;
  height: 0;
  visibility: hidden;
}

.CodeMirror-measure pre {
  position: static;
}

.CodeMirror div.CodeMirror-cursor {
  position: absolute;
  width: 0;
  border-right: none;
  visibility: hidden;
}

.CodeMirror-focused div.CodeMirror-cursor {
  visibility: visible;
}

.CodeMirror-selected {
  background: #d9d9d9;
}

.CodeMirror-focused .CodeMirror-selected {
  background: #bdc3c7;
}

.cm-searching {
  background: #ffa;
  background: rgb(255 255 0 / 40%);
}

/* IE7 hack to prevent it from returning funny offsetTops on the spans */
.CodeMirror span {
  *vertical-align: text-bottom;
}

@media print {
  /* Hide the cursor when printing */
  .CodeMirror div.CodeMirror-cursor {
    visibility: hidden;
  }
}

.CodeMirror {
  height: 450px;
}

:full-screen {
  width: 100%;
  height: 100%;
  padding: 0.5em 1em;
  background: #f9f9f5;
}

.editor-wrapper {
  color: #2c3e50;
  font: 16px/1.62 'Helvetica Neue', 'Xin Gothic', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft YaHei',
    sans-serif;
}

/* this is the title */
.editor-wrapper input.title {
  width: 100%;
  padding: 4px;
  border: none;
  background: transparent;
  font: 18px 'Helvetica Neue', 'Xin Gothic', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', 'Microsoft YaHei', sans-serif;
  opacity: 0.6;
  outline: none;
}

.editor-toolbar {
  position: relative;
  opacity: 0.6;
  user-select: none;
}

.editor-toolbar::before,
.editor-toolbar::after {
  display: block;
  height: 1px;
  background: linear-gradient(45deg, #f9f9f9, #bdc3c7, #f9f9f9);
  background-color: #bdc3c7;
  content: ' ';
}

.editor-toolbar::before {
  margin-bottom: 8px;
}

.editor-toolbar::after {
  margin-top: 8px;
}

.editor-wrapper input.title:hover,
.editor-wrapper input.title:focus,
.editor-toolbar:hover {
  opacity: 0.8;
}

.editor-toolbar a {
  display: inline-block;
  width: 24px;
  height: 24px;
  border: 1px solid transparent;
  margin: 2px;
  border-radius: 3px;
  color: #2c3e50 !important;
  cursor: pointer;
  text-align: center;
  text-decoration: none !important;
}

.editor-toolbar a:hover,
.editor-toolbar a.active {
  border-color: #95a5a6;
  background: #fcfcfc;
}

.editor-toolbar a::before {
  line-height: 24px;
}

.editor-toolbar i.separator {
  display: inline-block;
  width: 0;
  border-right: 1px solid white;
  border-left: 1px solid #d9d9d9;
  margin: 0 6px;
  color: transparent;
  text-indent: -10px;
}

.editor-toolbar a.icon-fullscreen {
  position: absolute;
  right: 0;
}

.editor-statusbar {
  padding: 8px 10px;
  border-top: 1px solid #ece9e9;
  color: #959694;
  font-size: 12px;
  text-align: right;
}

.editor-statusbar span {
  display: inline-block;
  min-width: 4em;
  margin-left: 1em;
}

.editor-statusbar .lines::before {
  content: 'lines: ';
}

.editor-statusbar .words::before {
  content: 'words: ';
}

.editor-preview {
  position: absolute;
  z-index: 9999;
  top: 0;
  left: 100%;
  overflow: auto;
  width: 100%;
  height: 100%;
  background: #f9f9f5;
  transition: left 0.2s ease;
}

.editor-preview-active {
  left: 0;
}

.editor-preview > p {
  margin-top: 0;
}
